diff -ru mutt-1.5.20/PATCHES mutt-ifdef/PATCHES
--- mutt-1.5.20/PATCHES	2010-07-11 18:58:14.152790042 -0400
+++ mutt-ifdef/PATCHES	2010-07-11 18:59:46.443148354 -0400
@@ -0,0 +1 @@
+patch-1.5.20.cd.ifdef.2
diff -ru mutt-1.5.20/doc/manual.xml.head mutt-ifdef/doc/manual.xml.head
--- mutt-1.5.20/doc/manual.xml.head	2010-07-11 18:58:14.139456668 -0400
+++ mutt-ifdef/doc/manual.xml.head	2010-07-11 19:04:34.976768877 -0400
@@ -4103,6 +4103,30 @@
 
 </sect1>
 
+<sect1 id="ifdef">
+<title>Configuring features conditionnaly</title>
+
+<cmdsynopsis>
+<command>ifdef</command>
+<group choice="req">
+<arg choice="plain">
+<replaceable class="parameter">item</replaceable>
+</arg>
+<arg choice="plain">
+<replaceable class="parameter">command</replaceable>
+</arg>
+</group>
+</cmdsynopsis>
+
+<para>
+This command allows to test if a feature has been compiled in, before
+actually executing the command. Item can be either the name of a
+function or a variable.
+
+Example: <literal><command>ifdef</command> imap_keepalive 'source &tilde;/.mutt/imap_setup'</literal>
+</para>
+</sect1>
+
 <sect1 id="unhook">
 <title>Removing Hooks</title>
 
diff -ru mutt-1.5.20/init.c mutt-ifdef/init.c
--- mutt-1.5.20/init.c	2010-07-11 18:58:14.109456715 -0400
+++ mutt-ifdef/init.c	2010-07-11 18:59:46.439468214 -0400
@@ -635,6 +635,52 @@
   return (rv);
 }
 
+static int parse_ifdef (BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
+{
+  int i, j, res = 0;
+  BUFFER token;
+
+  memset (&token, 0, sizeof (token));
+  mutt_extract_token (tmp, s, 0);
+
+  /* is the item defined as a variable or a function? */
+  if (!(res = (mutt_option_index (tmp->data) != -1)))
+    for (i = 0; !res && i < MENU_MAX; i++)
+    {
+      struct binding_t *b = km_get_table (Menus[i].value);
+
+      if (!b)
+	continue;
+
+      for (j = 0; b[j].name; j++)
+	if (!ascii_strncasecmp (tmp->data, b[j].name, mutt_strlen (tmp->data))
+	      && (mutt_strlen (b[j].name) == mutt_strlen (tmp->data)))
+	{
+	  res = 1;
+	  break;
+	}
+    }
+
+  if (!MoreArgs (s))
+  {
+    snprintf (err->data, err->dsize, _("ifdef: too few arguments"));
+    return (-1);
+  }
+  mutt_extract_token (tmp, s, M_TOKEN_SPACE);
+
+  if (res)
+  {
+    if (mutt_parse_rc_line (tmp->data, &token, err) == -1)
+    {
+      mutt_error ("Erreur: %s", err->data);
+      FREE (&token.data);
+      return (-1);
+    }
+    FREE (&token.data);
+  }
+  return 0;
+}
+
 static int parse_unignore (BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
 {
   do
diff -ru mutt-1.5.20/init.h mutt-ifdef/init.h
--- mutt-1.5.20/init.h	2010-07-11 18:58:14.159457593 -0400
+++ mutt-ifdef/init.h	2010-07-11 19:08:49.043007805 -0400
@@ -3664,6 +3664,7 @@
 static int parse_unlists (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_alias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unalias (BUFFER *, BUFFER *, unsigned long, BUFFER *);
+static int parse_ifdef (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_ignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_unignore (BUFFER *, BUFFER *, unsigned long, BUFFER *);
 static int parse_source (BUFFER *, BUFFER *, unsigned long, BUFFER *);
@@ -3719,6 +3720,7 @@
   { "group",		parse_group,		0 },
   { "ungroup",		parse_ungroup,		0 },
   { "hdr_order",	parse_list,		UL &HeaderOrderList },
+  { "ifdef",		parse_ifdef,		0 },
 #ifdef HAVE_ICONV
   { "iconv-hook",	mutt_parse_hook,	M_ICONVHOOK },
 #endif
